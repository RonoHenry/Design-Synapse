"""DesignOptimization model for AI-generated optimization suggestions."""

from datetime import datetime, timezone
from typing import Optional

from sqlalchemy import Integer, String, Text, Float, DateTime, ForeignKey
from sqlalchemy.orm import Mapped, mapped_column, relationship

from src.infrastructure.database import Base


class DesignOptimization(Base):
    """AI-generated optimization suggestions for designs.
    
    Stores optimization recommendations generated by AI analysis,
    including cost, structural, and sustainability improvements.
    """
    __tablename__ = "design_optimizations"

    # Primary key
    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    
    # Foreign key to Design
    design_id: Mapped[int] = mapped_column(
        Integer,
        ForeignKey("designs.id", ondelete="CASCADE"),
        nullable=False
    )

    # Optimization details
    optimization_type: Mapped[str] = mapped_column(
        String(100),
        nullable=False
    )  # cost, structural, sustainability
    
    title: Mapped[str] = mapped_column(String(255), nullable=False)
    description: Mapped[str] = mapped_column(Text, nullable=False)

    # Impact analysis
    estimated_cost_impact: Mapped[Optional[float]] = mapped_column(
        Float,
        nullable=True
    )  # percentage (negative = cost reduction, positive = cost increase)
    
    implementation_difficulty: Mapped[str] = mapped_column(
        String(50),
        nullable=False
    )  # easy, medium, hard
    
    priority: Mapped[str] = mapped_column(
        String(50),
        default="medium",
        nullable=False
    )  # low, medium, high

    # Application status
    status: Mapped[str] = mapped_column(
        String(50),
        default="suggested",
        nullable=False
    )  # suggested, applied, rejected
    
    applied_at: Mapped[Optional[datetime]] = mapped_column(
        DateTime,
        nullable=True
    )
    
    applied_by: Mapped[Optional[int]] = mapped_column(
        Integer,
        nullable=True
    )

    # Audit
    created_at: Mapped[datetime] = mapped_column(
        DateTime,
        default=lambda: datetime.now(timezone.utc),
        nullable=False
    )

    # Relationship
    design: Mapped["Design"] = relationship(
        "Design",
        back_populates="optimizations"
    )

    def __repr__(self) -> str:
        """String representation of DesignOptimization."""
        return (
            f"<DesignOptimization(id={self.id}, "
            f"design_id={self.design_id}, "
            f"type={self.optimization_type}, "
            f"title='{self.title}', "
            f"status={self.status})>"
        )
